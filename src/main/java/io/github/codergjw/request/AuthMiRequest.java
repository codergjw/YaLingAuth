package io.github.codergjw.request;import io.github.codergjw.cache.AuthStateCache;import io.github.codergjw.config.AuthConfig;import io.github.codergjw.config.AuthDefaultSource;import io.github.codergjw.entity.AuthCallback;import io.github.codergjw.entity.AuthResponse;import io.github.codergjw.entity.AuthToken;import io.github.codergjw.entity.AuthUser;import io.github.codergjw.enums.AuthResponseStatus;import io.github.codergjw.enums.AuthUserGender;import io.github.codergjw.enums.scope.AuthMiScope;import io.github.codergjw.exception.AuthException;import io.github.codergjw.log.Log;import io.github.codergjw.utils.AuthScopeUtils;import io.github.codergjw.utils.HttpUtils;import io.github.codergjw.utils.UrlBuilder;import com.alibaba.fastjson.JSONObject;import com.xkcoding.http.constants.Constants;import java.text.MessageFormat;/** * @ClassName: AuthMiRequest * @Author: 小飞 * @Date: 2023/5/13 14:14 * @Description: 小米授权登录请求处理类 */public class AuthMiRequest extends AuthDefaultRequest {    private static final String PREFIX = "&&&START&&&";    public AuthMiRequest(AuthConfig config) {        super(config, AuthDefaultSource.MI);    }    public AuthMiRequest(AuthConfig config, AuthStateCache authStateCache) {        super(config, AuthDefaultSource.MI, authStateCache);    }    @Override    protected AuthToken getAccessToken(AuthCallback authCallback) {        return getToken(accessTokenUrl(authCallback.getCode()));    }    private AuthToken getToken(String accessTokenUrl) {        String response = new HttpUtils(config.getHttpConfig()).get(accessTokenUrl).getBody();        String jsonStr = response.replace(PREFIX, Constants.EMPTY);        JSONObject accessTokenObject = JSONObject.parseObject(jsonStr);        // 校验        this.checkResponse(accessTokenObject);        return AuthToken.builder()                .accessToken(accessTokenObject.getString("access_token"))                .expireIn(accessTokenObject.getIntValue("expires_in"))                .scope(accessTokenObject.getString("scope"))                .tokenType(accessTokenObject.getString("token_type"))                .refreshToken(accessTokenObject.getString("refresh_token"))                .openId(accessTokenObject.getString("openId"))                .macAlgorithm(accessTokenObject.getString("mac_algorithm"))                .macKey(accessTokenObject.getString("mac_key"))                .build();    }    @Override    protected AuthUser getUserInfo(AuthToken authToken) {        // 获取用户信息        String userResponse = doGetUserInfo(authToken);        // 解析用户的信息        JSONObject userProfile = JSONObject.parseObject(userResponse);        if ("error".equalsIgnoreCase(userProfile.getString("result"))) {            throw new AuthException(userProfile.getString("description"));        }        JSONObject object = userProfile.getJSONObject("data");        AuthUser authUser = AuthUser.builder()                .rawUserInfo(object)                .uuid(authToken.getOpenId())                .username(object.getString("miliaoNick"))                .nickname(object.getString("miliaoNick"))                .avatar(object.getString("miliaoIcon"))                .email(object.getString("mail"))                .gender(AuthUserGender.UNKNOWN)                .token(authToken)                .source(source.toString())                .build();        // 获取用户邮箱手机号等信息        String emailPhoneUrl = MessageFormat.format("{0}?clientId={1}&token={2}",                "https://open.account.xiaomi.com/user/phoneAndEmail", config                        .getClientId(), authToken.getAccessToken());        String emailResponse = new HttpUtils(config.getHttpConfig()).get(emailPhoneUrl).getBody();        JSONObject userEmailPhone = JSONObject.parseObject(emailResponse);        if (!"error".equalsIgnoreCase(userEmailPhone.getString("result"))) {            JSONObject emailPhone = userEmailPhone.getJSONObject("data");            authUser.setEmail(emailPhone.getString("email"));        } else {            Log.warn("小米开发平台暂时不对外开放用户手机及邮箱信息的获取");        }        return authUser;    }    /**     * 刷新accessToken续期     *     * @param authToken 登录成功后返回的Token信息     * @return     */    @Override    public AuthResponse refresh(AuthToken authToken) {        return AuthResponse.builder()                .code(AuthResponseStatus.SUCCESS.getCode())                .data(getToken(refreshTokenUrl(authToken.getRefreshToken())))                .build();    }    /**     * 返回带{@code state}参数的授权url，授权回调时会带上这个{@code state}     *     * @param state state 验证授权流程的参数，可以防止csrf     * @return     */    @Override    public String authorize(String state) {        return UrlBuilder.fromBaseUrl(super.authorize(state))                .queryParam("skip_confirm", "false")                .queryParam("scope", this.getScopes(" ", true,                        AuthScopeUtils.getDefaultScopes(AuthMiScope.values())))                .build();    }    /**     * 生成获取UserInfo的Url路径     *     * @param authToken token     * @return     */    @Override    protected String userInfoUrl(AuthToken authToken) {        return UrlBuilder.fromBaseUrl(source.userInfo())                .queryParam("clientId", config.getClientId())                .queryParam("token", authToken.getAccessToken())                .build();    }}