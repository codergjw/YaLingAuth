package io.github.codergjw.request;import io.github.codergjw.cache.AuthStateCache;import io.github.codergjw.config.AuthConfig;import io.github.codergjw.config.AuthDefaultSource;import io.github.codergjw.entity.AuthCallback;import io.github.codergjw.entity.AuthToken;import io.github.codergjw.entity.AuthUser;import io.github.codergjw.enums.AuthUserGender;import io.github.codergjw.enums.scope.AuthGoogleScope;import io.github.codergjw.utils.AuthScopeUtils;import io.github.codergjw.utils.HttpUtils;import io.github.codergjw.utils.UrlBuilder;import com.alibaba.fastjson.JSONObject;import com.xkcoding.http.support.HttpHeader;/** * @ClassName: AuthGoogleRequest * @Author: 小飞 * @Date: 2023/5/13 13:19 * @Description: 谷歌登录授权请求处理类 */public class AuthGoogleRequest extends AuthDefaultRequest {    public AuthGoogleRequest(AuthConfig config) {        super(config, AuthDefaultSource.GOOGLE);    }    public AuthGoogleRequest(AuthConfig config, AuthStateCache authStateCache) {        super(config, AuthDefaultSource.GOOGLE, authStateCache);    }    @Override    protected AuthToken getAccessToken(AuthCallback authCallback) {        String response = doPostAuthorizationCode(authCallback.getCode());        JSONObject accessTokenObject = JSONObject.parseObject(response);        this.checkResponse(accessTokenObject);        return AuthToken.builder()                .accessToken(accessTokenObject.getString("access_token"))                .expireIn(accessTokenObject.getIntValue("expires_in"))                .scope(accessTokenObject.getString("scope"))                .tokenType(accessTokenObject.getString("token_type"))                .idToken(accessTokenObject.getString("id_token"))                .build();    }    @Override    protected AuthUser getUserInfo(AuthToken authToken) {        HttpHeader head = new HttpHeader();        head.add("Authorization",  "Bearer " + authToken.getAccessToken());        String userInfo = new HttpUtils(config.getHttpConfig()).post(userInfoUrl(authToken), null, head)                .getBody();        JSONObject object = JSONObject.parseObject(userInfo);        this.checkResponse(object);        return AuthUser.builder()                .rawUserInfo(object)                .uuid(object.getString("sub"))                .username(object.getString("email"))                .avatar(object.getString("picture"))                .nickname(object.getString("name"))                .location(object.getString("locale"))                .email(object.getString("email"))                .gender(AuthUserGender.UNKNOWN)                .token(authToken)                .source(source.toString())                .build();    }    @Override    public String authorize(String state) {        return UrlBuilder.fromBaseUrl(super.authorize(state))                .queryParam("access_type", "offline")                .queryParam("scope", this.getScopes(" ",                        false, AuthScopeUtils.getDefaultScopes(AuthGoogleScope.values())))                .queryParam("prompt", "select_account")                .build();    }    @Override    protected String userInfoUrl(AuthToken authToken) {        return UrlBuilder.fromBaseUrl(source.userInfo())                .queryParam("access_token", authToken.getAccessToken()).build();    }}