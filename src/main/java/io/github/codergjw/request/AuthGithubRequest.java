package io.github.codergjw.request;import io.github.codergjw.cache.AuthStateCache;import io.github.codergjw.config.AuthConfig;import io.github.codergjw.config.AuthDefaultSource;import io.github.codergjw.entity.AuthCallback;import io.github.codergjw.entity.AuthToken;import io.github.codergjw.entity.AuthUser;import io.github.codergjw.enums.AuthUserGender;import io.github.codergjw.enums.scope.AuthGithubScope;import io.github.codergjw.exception.AuthException;import io.github.codergjw.utils.AuthScopeUtils;import io.github.codergjw.utils.GlobalAuthUtils;import io.github.codergjw.utils.HttpUtils;import io.github.codergjw.utils.UrlBuilder;import com.alibaba.fastjson.JSONObject;import com.xkcoding.http.support.HttpHeader;import java.util.Map;/** * @ClassName: AuthGithubRequest * @Author: 小飞 * @Date: 2023/5/11 16:10 * @Description: Github 授权登录请求处理类 */public class AuthGithubRequest extends AuthDefaultRequest {    public AuthGithubRequest(AuthConfig config) {        super(config, AuthDefaultSource.GITHUB);    }    public AuthGithubRequest(AuthConfig config, AuthStateCache authStateCache) {        super(config, AuthDefaultSource.GITHUB, authStateCache);    }    @Override    protected AuthToken getAccessToken(AuthCallback authCallback) {        String response = doPostAuthorizationCode(authCallback.getCode());        Map<String, String> res = GlobalAuthUtils.parseStringToMap(response);        this.checkResponse(res.containsKey("error"), res.get("error_description"));        return AuthToken.builder()                .accessToken(res.get("access_token"))                .scope(res.get("scope"))                .tokenType(res.get("token_type"))                .build();    }    @Override    protected AuthUser getUserInfo(AuthToken authToken) {        HttpHeader header = new HttpHeader();        header.add("Authorization", "token " + authToken.getAccessToken());        String response = new HttpUtils(config.getHttpConfig()).get(UrlBuilder.fromBaseUrl(source.userInfo()).build(), null, header, false).getBody();        JSONObject object = JSONObject.parseObject(response);        // 校验参数是否异常        this.checkResponse(object.containsKey("error"), object.getString("error_description"));        return AuthUser.builder()                .rawUserInfo(object)                .uuid(object.getString("id"))                .username(object.getString("login"))                .avatar(object.getString("avatar_url"))                .blog(object.getString("blog"))                .nickname(object.getString("name"))                .company(object.getString("company"))                .location(object.getString("location"))                .email(object.getString("email"))                .remark(object.getString("bio"))                .gender(AuthUserGender.UNKNOWN)                .token(authToken)                .source(source.toString())                .build();    }    private void checkResponse(boolean error, String errorDescription) {        if (error) {            throw new AuthException(errorDescription);        }    }    /**     * 返回带{@code state}参数的授权url，授权回调时会带上这个{@code state}     *     * @param state state 验证授权流程的参数，可以防止csrf     * @return 返回授权地址     */    @Override    public String authorize(String state) {        return UrlBuilder.fromBaseUrl(super.authorize(state))                .queryParam("scope", this.getScopes(" ", true,                        AuthScopeUtils.getDefaultScopes(AuthGithubScope.values())))                .build();    }}