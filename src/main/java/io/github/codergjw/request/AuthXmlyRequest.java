package io.github.codergjw.request;import io.github.codergjw.cache.AuthStateCache;import io.github.codergjw.config.AuthConfig;import io.github.codergjw.config.AuthDefaultSource;import io.github.codergjw.entity.AuthCallback;import io.github.codergjw.entity.AuthToken;import io.github.codergjw.entity.AuthUser;import io.github.codergjw.enums.AuthUserGender;import io.github.codergjw.utils.GlobalAuthUtils;import io.github.codergjw.utils.UrlBuilder;import com.alibaba.fastjson.JSONObject;import com.xkcoding.http.HttpUtil;import java.util.HashMap;import java.util.Map;import java.util.Optional;import java.util.TreeMap;/** * @ClassName: AuthXmlyRequest * @Author: 小飞 * @Date: 2023/5/13 14:53 * @Description: 喜马拉雅登录授权请求处理类 */public class AuthXmlyRequest extends AuthDefaultRequest {    public AuthXmlyRequest(AuthConfig config) {        super(config, AuthDefaultSource.XMLY);    }    public AuthXmlyRequest(AuthConfig config, AuthStateCache authStateCache) {        super(config, AuthDefaultSource.XMLY, authStateCache);    }    /**     * 获取accessToken     *     * @param authCallback 授权成功后的回调参数     * @return     */    @Override    protected AuthToken getAccessToken(AuthCallback authCallback) {        Map<String, String> params = new HashMap<>(9);        params.put("code", authCallback.getCode());        params.put("client_id", config.getClientId());        params.put("client_secret", config.getClientSecret());        params.put("device_id", config.getDeviceId());        params.put("grant_type", "authorization_code");        params.put("redirect_uri", config.getRedirectUri());        String response = HttpUtil.post(source.accessToken(), params, true).getBody();        JSONObject accessTokenObject = JSONObject.parseObject(response);        checkResponse(accessTokenObject);        return AuthToken.builder()                .accessToken(accessTokenObject.getString("access_token"))                .refreshToken(accessTokenObject.getString("refresh_token"))                .expireIn(accessTokenObject.getIntValue("expires_in"))                .uid(accessTokenObject.getString("uid"))                .build();    }    /**     * 生成授权路径     *     * @param state state 验证授权流程的参数，可以防止csrf     * @return     */    @Override    public String authorize(String state) {        return UrlBuilder.fromBaseUrl(source.authorize())                .queryParam("response_type", "code")                .queryParam("client_id", config.getClientId())                .queryParam("redirect_uri", config.getRedirectUri())                .queryParam("state", getRealState(state))                .queryParam("client_os_type", "3")                .queryParam("device_id", config.getDeviceId())                .build();    }    /**     * 通过token获取用户信息     * @param authToken token信息     * @return     */    @Override    protected AuthUser getUserInfo(AuthToken authToken) {        Map<String, String> params = new TreeMap<>();        params.put("app_key", config.getClientId());        params.put("client_os_type", Optional.ofNullable(config.getClientOsType()).orElse(3).toString());        params.put("device_id", config.getDeviceId());        params.put("pack_id", config.getPackId());        params.put("access_token", authToken.getAccessToken());        params.put("sig", GlobalAuthUtils.generateXmlySignature(params, config.getClientSecret()));        String rawUserInfo = HttpUtil.get(source.userInfo(), params, false).getBody();        JSONObject object = JSONObject.parseObject(rawUserInfo);        checkResponse(object);        return AuthUser.builder()                .uuid(object.getString("id"))                .nickname(object.getString("nickname"))                .avatar(object.getString("avatar_url"))                .rawUserInfo(object)                .source(source.toString())                .token(authToken)                .gender(AuthUserGender.UNKNOWN)                .build();    }}