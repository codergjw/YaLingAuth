package io.github.codergjw.request;import io.github.codergjw.cache.AuthStateCache;import io.github.codergjw.config.AuthConfig;import io.github.codergjw.config.AuthDefaultSource;import io.github.codergjw.entity.AuthCallback;import io.github.codergjw.entity.AuthToken;import io.github.codergjw.entity.AuthUser;import io.github.codergjw.enums.AuthUserGender;import io.github.codergjw.enums.scope.AuthProginnScope;import io.github.codergjw.utils.AuthScopeUtils;import io.github.codergjw.utils.HttpUtils;import io.github.codergjw.utils.UrlBuilder;import com.alibaba.fastjson.JSONObject;import java.util.HashMap;import java.util.Map;/** * @ClassName: AuthProginnRequest * @Author: 小飞 * @Date: 2023/5/13 14:28 * @Description: 程序员客栈登录授权请求处理类 */public class AuthProginnRequest extends AuthDefaultRequest {    public AuthProginnRequest(AuthConfig config) {        super(config, AuthDefaultSource.PROGINN);    }    public AuthProginnRequest(AuthConfig config, AuthStateCache authStateCache) {        super(config, AuthDefaultSource.PROGINN, authStateCache);    }    @Override    protected AuthToken getAccessToken(AuthCallback authCallback) {        Map<String, String> params = new HashMap<>();        params.put("code", authCallback.getCode());        params.put("client_id", config.getClientId());        params.put("client_secret", config.getClientSecret());        params.put("grant_type", "authorization_code");        params.put("redirect_uri", config.getRedirectUri());        String response = new HttpUtils(config.getHttpConfig()).post(AuthDefaultSource.PROGINN.accessToken(),                params, false).getBody();        JSONObject accessTokenObject = JSONObject.parseObject(response);        this.checkResponse(accessTokenObject);        return AuthToken.builder()                .accessToken(accessTokenObject.getString("access_token"))                .refreshToken(accessTokenObject.getString("refresh_token"))                .uid(accessTokenObject.getString("uid"))                .tokenType(accessTokenObject.getString("token_type"))                .expireIn(accessTokenObject.getIntValue("expires_in"))                .build();    }    @Override    protected AuthUser getUserInfo(AuthToken authToken) {        String userInfo = doGetUserInfo(authToken);        JSONObject object = JSONObject.parseObject(userInfo);        this.checkResponse(object);        return AuthUser.builder()                .rawUserInfo(object)                .uuid(object.getString("uid"))                .username(object.getString("nickname"))                .nickname(object.getString("nickname"))                .avatar(object.getString("avatar"))                .email(object.getString("email"))                .gender(AuthUserGender.UNKNOWN)                .token(authToken)                .source(source.toString())                .build();    }    /**     * 返回带{@code state}参数的授权url，授权回调时会带上这个{@code state}     *     * @param state state 验证授权流程的参数，可以防止csrf     * @return     */    @Override    public String authorize(String state) {        return UrlBuilder.fromBaseUrl(super.authorize(state))                .queryParam("scope", this.getScopes(" ", true,                        AuthScopeUtils.getDefaultScopes(AuthProginnScope.values())))                .build();    }}