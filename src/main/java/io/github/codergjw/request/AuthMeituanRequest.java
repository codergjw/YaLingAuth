package io.github.codergjw.request;import io.github.codergjw.cache.AuthStateCache;import io.github.codergjw.config.AuthConfig;import io.github.codergjw.config.AuthDefaultSource;import io.github.codergjw.entity.AuthCallback;import io.github.codergjw.entity.AuthResponse;import io.github.codergjw.entity.AuthToken;import io.github.codergjw.entity.AuthUser;import io.github.codergjw.enums.AuthResponseStatus;import io.github.codergjw.enums.AuthUserGender;import io.github.codergjw.exception.AuthException;import io.github.codergjw.utils.HttpUtils;import io.github.codergjw.utils.UrlBuilder;import com.alibaba.fastjson.JSONObject;import java.util.HashMap;import java.util.Map;/** * @ClassName: AuthMeituanRequest * @Author: 小飞 * @Date: 2023/5/13 14:01 * @Description: 美团登录授权请求处理类 */public class AuthMeituanRequest extends AuthDefaultRequest {    public AuthMeituanRequest(AuthConfig config) {        super(config, AuthDefaultSource.MEITUAN);    }    public AuthMeituanRequest(AuthConfig config, AuthStateCache authStateCache) {        super(config, AuthDefaultSource.MEITUAN, authStateCache);    }    @Override    protected AuthToken getAccessToken(AuthCallback authCallback) {        Map<String, String> params = new HashMap<>(7);        params.put("app_id", config.getClientId());        params.put("secret", config.getClientSecret());        params.put("code", authCallback.getCode());        params.put("grant_type", "authorization_code");        String response = new HttpUtils(config.getHttpConfig()).post(source.accessToken(), params, false).getBody();        JSONObject object = JSONObject.parseObject(response);        this.checkResponse(object);        return AuthToken.builder()                .accessToken(object.getString("access_token"))                .refreshToken(object.getString("refresh_token"))                .expireIn(object.getIntValue("expires_in"))                .build();    }    @Override    protected AuthUser getUserInfo(AuthToken authToken) {        Map<String, String> params = new HashMap<>(5);        params.put("app_id", config.getClientId());        params.put("secret", config.getClientSecret());        params.put("access_token", authToken.getAccessToken());        String response = new HttpUtils(config.getHttpConfig()).post(source.userInfo(), params, false).getBody();        JSONObject object = JSONObject.parseObject(response);        this.checkResponse(object);        return AuthUser.builder()                .rawUserInfo(object)                .uuid(object.getString("openid"))                .username(object.getString("nickname"))                .nickname(object.getString("nickname"))                .avatar(object.getString("avatar"))                .gender(AuthUserGender.UNKNOWN)                .token(authToken)                .source(source.toString())                .build();    }    @Override    public AuthResponse refresh(AuthToken oldToken) {        Map<String, String> form = new HashMap<>(7);        form.put("app_id", config.getClientId());        form.put("secret", config.getClientSecret());        form.put("refresh_token", oldToken.getRefreshToken());        form.put("grant_type", "refresh_token");        String response = new HttpUtils(config.getHttpConfig()).post(source.refresh(), form, false).getBody();        JSONObject object = JSONObject.parseObject(response);        this.checkResponse(object);        return AuthResponse.builder()                .code(AuthResponseStatus.SUCCESS.getCode())                .data(AuthToken.builder()                        .accessToken(object.getString("access_token"))                        .refreshToken(object.getString("refresh_token"))                        .expireIn(object.getIntValue("expires_in"))                        .build())                .build();    }    /**     * 校验响应数据的准确性     *     * @param object     */    @Override    protected void checkResponse(JSONObject object) {        throw new AuthException(object.containsKey("error") ?                object.getString("error") :                object.getString("error_msg"));    }    @Override    public String authorize(String state) {        return UrlBuilder.fromBaseUrl(super.authorize(state))                .queryParam("scope", "")                .build();    }}