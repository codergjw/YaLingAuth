package io.github.codergjw.request;import io.github.codergjw.cache.AuthStateCache;import io.github.codergjw.config.AuthConfig;import io.github.codergjw.config.AuthDefaultSource;import io.github.codergjw.entity.AuthCallback;import io.github.codergjw.entity.AuthToken;import io.github.codergjw.entity.AuthUser;import io.github.codergjw.enums.AuthUserGender;import io.github.codergjw.enums.scope.AuthToutiaoErrorCode;import io.github.codergjw.exception.AuthException;import io.github.codergjw.utils.UrlBuilder;import com.alibaba.fastjson.JSONObject;/** * @ClassName: AuthToutiaoRequest * @Author: 小飞 * @Date: 2023/5/10 20:20 * @Description: 今日头条的登录请求处理类 */public class AuthToutiaoRequest extends AuthDefaultRequest{    public AuthToutiaoRequest(AuthConfig config) {        super(config, AuthDefaultSource.TOUTIAO);    }    public AuthToutiaoRequest(AuthConfig config, AuthStateCache authStateCache) {        super(config, AuthDefaultSource.TOUTIAO, authStateCache);    }    @Override    protected AuthToken getAccessToken(AuthCallback authCallback) {        String response = doGetAuthorizationCode(authCallback.getCode());        JSONObject accessTokenObject = JSONObject.parseObject(response);        // 校验响应数据        this.checkResponse(accessTokenObject);        // 创建AuthToken信息        return AuthToken.builder()                .accessToken(accessTokenObject.getString("access_token"))                .expireIn(accessTokenObject.getIntValue("expires_in"))                .openId(accessTokenObject.getString("open_id"))                .build();    }    @Override    protected AuthUser getUserInfo(AuthToken authToken) {        String userResponse = doGetUserInfo(authToken);        // 解析JSONObject        JSONObject userProfile = JSONObject.parseObject(userResponse);        // 校验返回参数        this.checkResponse(userProfile);        // 解析返回的字符串        JSONObject user = userProfile.getJSONObject("data");        // 判断是否为匿名用户        boolean isAnonymousUser = user.getIntValue("uid_type") == 14;        String anonymousUserName = "匿名用户";        // 生成UserInfo数据        return AuthUser.builder()                .rawUserInfo(user)                .uuid(user.getString("uid"))                .username(isAnonymousUser ? anonymousUserName : user.getString("screen_name"))                .nickname(isAnonymousUser ? anonymousUserName : user.getString("screen_name"))                .avatar(user.getString("avatar_url"))                .remark(user.getString("description"))                .gender(AuthUserGender.getRealGender(user.getString("gender")))                .token(authToken)                .source(source.toString())                .build();    }    /**     * 返回带{@code state}参数的授权url，授权回调时会带上这个{@code state}     *     * @param state state 验证授权流程的参数，可以防止csrf     * @return     */    @Override    public String authorize(String state) {        return UrlBuilder.fromBaseUrl(source.userInfo())                .queryParam("response_type", "code")                .queryParam("client_key", config.getClientId())                .queryParam("redirect_uri", config.getRedirectUri())                .queryParam("auth_only", 1)                .queryParam("display", 0)                .queryParam("state", getRealState(state))                .build();    }    /**     * 生成accessToken的Url     * @param code 授权码     * @return     */    @Override    protected String accessTokenUrl(String code) {        return UrlBuilder.fromBaseUrl(source.accessToken())                .queryParam("code", code)                .queryParam("client_key", config.getClientId())                .queryParam("client_secret", config.getClientSecret())                .queryParam("grant_type", "authorization_code")                .build();    }    /**     * 生成获取UserInfo的Url     * @param authToken token     * @return     */    @Override    protected String userInfoUrl(AuthToken authToken) {        return UrlBuilder.fromBaseUrl(source.userInfo())                .queryParam("client_key", config.getClientId())                .queryParam("access_token", authToken.getAccessToken())                .build();    }    /**     * 检查响应内容是否正确     *     * @param object 请求响应内容     */    @Override    protected void checkResponse(JSONObject object) {        if (object.containsKey("error_code")) {            throw new AuthException(AuthToutiaoErrorCode.getErrorCode(object.getIntValue("error_code")).getDesc());        }    }}