package io.github.codergjw.request;import io.github.codergjw.cache.AuthStateCache;import io.github.codergjw.config.AuthConfig;import io.github.codergjw.config.AuthDefaultSource;import io.github.codergjw.entity.AuthCallback;import io.github.codergjw.entity.AuthResponse;import io.github.codergjw.entity.AuthToken;import io.github.codergjw.entity.AuthUser;import io.github.codergjw.enums.AuthResponseStatus;import io.github.codergjw.enums.AuthUserGender;import io.github.codergjw.enums.scope.AuthBaiduScope;import io.github.codergjw.utils.AuthScopeUtils;import io.github.codergjw.utils.HttpUtils;import io.github.codergjw.utils.StringUtils;import io.github.codergjw.utils.UrlBuilder;import com.alibaba.fastjson.JSONObject;/** * @ClassName: AuthBaiduRequest * @Author: 小飞 * @Date: 2023/5/10 19:42 * @Description: 百度权限登录的请求类 */public class AuthBaiduRequest extends AuthDefaultRequest{    public AuthBaiduRequest(AuthConfig config) {        super(config, AuthDefaultSource.BAIDU);    }    public AuthBaiduRequest(AuthConfig config, AuthStateCache authStateCache) {        super(config, AuthDefaultSource.BAIDU, authStateCache);    }    @Override    protected AuthToken getAccessToken(AuthCallback authCallback) {        String response = doPostAuthorizationCode(authCallback.getCode());        return getAuthToken(response);    }    @Override    protected AuthUser getUserInfo(AuthToken authToken) {        String userInfo = doGetUserInfo(authToken);        JSONObject object = JSONObject.parseObject(userInfo);        this.checkResponse(object);        return AuthUser.builder()                .rawUserInfo(object)                .uuid(object.containsKey("userid") ? object.getString("userid") : object.getString("openid"))                .username(object.getString("username"))                .nickname(object.getString("username"))                .avatar(getAvatar(object))                .remark(object.getString("userdetail"))                .gender(AuthUserGender.getRealGender(object.getString("sex")))                .token(authToken)                .source(source.toString())                .build();    }    /**     * 撤销授权     * @param authToken 登录成功后返回的Token信息     * @return 统一返回响应封装类     */    @Override    public AuthResponse revoke(AuthToken authToken) {        String response = doGetRevoke(authToken);        JSONObject object = JSONObject.parseObject(response);        this.checkResponse(object);        // 返回参数校验 如果返回的参数为1则取消授权成功        AuthResponseStatus status = object.getIntValue("result") == 1 ?                AuthResponseStatus.SUCCESS : AuthResponseStatus.FAILURE;        return AuthResponse.builder().code(status.getCode()).msg(status.getMsg()).build();    }    @Override    public AuthResponse refresh(AuthToken authToken) {        String refreshUrl = UrlBuilder.fromBaseUrl(this.source.refresh())                .queryParam("grant_type", "refresh_token")                .queryParam("refresh_token", authToken.getRefreshToken())                .queryParam("client_id", this.config.getClientId())                .queryParam("client_secret", this.config.getClientSecret())                .build();        String response = new HttpUtils(config.getHttpConfig()).get(refreshUrl).getBody();        return AuthResponse.builder()                .code(AuthResponseStatus.SUCCESS.getCode())                .data(this.getAuthToken(response))                .build();    }    /**     * 返回带{@code state}参数的授权url，授权回调时会带上这个{@code state}     *     * @param state state 验证授权流程的参数，可以防止csrf     * @return 返回授权地址     * @since 1.9.3     */    @Override    public String authorize(String state) {        return UrlBuilder.fromBaseUrl(super.authorize(state))                .queryParam("display", "popup")                .queryParam("scope", this.getScopes(" ", true,                        AuthScopeUtils.getDefaultScopes(AuthBaiduScope.values())))                .build();    }    /**     * 获取头像参数     * @param object     * @return     */    private String getAvatar(JSONObject object) {        String portrait = object.getString("portrait");        return StringUtils.isEmpty(portrait) ?                null : String.format("http://himg.bdimg.com/sys/portrait/item/%s.jpg", portrait);    }    /**     * 解析返回数据     * @param response     * @return     */    private AuthToken getAuthToken(String response) {        JSONObject accessTokenObject = JSONObject.parseObject(response);        // 校验响应数据        this.checkResponse(accessTokenObject);        return AuthToken.builder()                .accessToken(accessTokenObject.getString("access_token"))                .refreshToken(accessTokenObject.getString("refresh_token"))                .scope(accessTokenObject.getString("scope"))                .expireIn(accessTokenObject.getIntValue("expires_in"))                .build();    }}