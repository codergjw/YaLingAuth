package cn.wen.oauth.request;import cn.wen.oauth.cache.AuthStateCache;import cn.wen.oauth.config.AuthConfig;import cn.wen.oauth.config.AuthDefaultSource;import cn.wen.oauth.entity.AuthCallback;import cn.wen.oauth.entity.AuthResponse;import cn.wen.oauth.entity.AuthToken;import cn.wen.oauth.entity.AuthUser;import cn.wen.oauth.enums.AuthResponseStatus;import cn.wen.oauth.enums.AuthUserGender;import cn.wen.oauth.enums.scope.AuthJdScope;import cn.wen.oauth.exception.AuthException;import cn.wen.oauth.utils.AuthScopeUtils;import cn.wen.oauth.utils.GlobalAuthUtils;import cn.wen.oauth.utils.HttpUtils;import cn.wen.oauth.utils.UrlBuilder;import com.alibaba.fastjson.JSONObject;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import java.util.HashMap;import java.util.Map;/** * @ClassName: AuthJdRequest * @Author: 小飞 * @Date: 2023/5/13 13:43 * @Description: 京东授权登录请求处理类 */public class AuthJdRequest extends AuthDefaultRequest {    public AuthJdRequest(AuthConfig config) {        super(config, AuthDefaultSource.JD);    }    public AuthJdRequest(AuthConfig config, AuthStateCache authStateCache) {        super(config, AuthDefaultSource.JD, authStateCache);    }    @Override    protected AuthToken getAccessToken(AuthCallback authCallback) {        Map<String, String> params = new HashMap<>(7);        params.put("app_key", config.getClientId());        params.put("app_secret", config.getClientSecret());        params.put("grant_type", "authorization_code");        params.put("code", authCallback.getCode());        String response = new HttpUtils(config.getHttpConfig()).post(source.accessToken(), params, false).getBody();        JSONObject object = JSONObject.parseObject(response);        // 校验        this.checkResponse(object);        return AuthToken.builder()                .accessToken(object.getString("access_token"))                .expireIn(object.getIntValue("expires_in"))                .refreshToken(object.getString("refresh_token"))                .scope(object.getString("scope"))                .openId(object.getString("open_id"))                .build();    }    @Override    protected AuthUser getUserInfo(AuthToken authToken) {        UrlBuilder urlBuilder = UrlBuilder.fromBaseUrl(source.userInfo())                .queryParam("access_token", authToken.getAccessToken())                .queryParam("app_key", config.getClientId())                .queryParam("method", "jingdong.user.getUserInfoByOpenId")                .queryParam("360buy_param_json", "{\"openId\":\"" + authToken.getOpenId() + "\"}")                .queryParam("timestamp", LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")))                .queryParam("v", "2.0");        urlBuilder.queryParam("sign",                GlobalAuthUtils.generateJdSignature(config.getClientSecret(),                        urlBuilder.getReadOnlyParams()));        String response = new HttpUtils(config.getHttpConfig()).post(urlBuilder.build(true)).getBody();        JSONObject object = JSONObject.parseObject(response);        this.checkResponse(object);        JSONObject data = this.getUserDataJsonObject(object);        return AuthUser.builder()                .rawUserInfo(data)                .uuid(authToken.getOpenId())                .username(data.getString("nickName"))                .nickname(data.getString("nickName"))                .avatar(data.getString("imageUrl"))                .gender(AuthUserGender.getRealGender(data.getString("gendar")))                .token(authToken)                .source(source.toString())                .build();    }    /**     * 个人用户无法申请应用     * 暂时只能参考官网给出的返回结果解析     *     * @param object 请求返回结果     * @return data JSONObject     */    private JSONObject getUserDataJsonObject(JSONObject object) {        return object.getJSONObject("jingdong_user_getUserInfoByOpenId_response")                .getJSONObject("getuserinfobyappidandopenid_result")                .getJSONObject("data");    }    @Override    public AuthResponse refresh(AuthToken oldToken) {        Map<String, String> params = new HashMap<>(7);        params.put("app_key", config.getClientId());        params.put("app_secret", config.getClientSecret());        params.put("grant_type", "refresh_token");        params.put("refresh_token", oldToken.getRefreshToken());        String response = new HttpUtils(config.getHttpConfig()).post(source.refresh(), params, false).getBody();        JSONObject object = JSONObject.parseObject(response);        this.checkResponse(object);        return AuthResponse.builder()                .code(AuthResponseStatus.SUCCESS.getCode())                .data(AuthToken.builder()                    .accessToken(object.getString("access_token"))                    .expireIn(object.getIntValue("expires_in"))                    .refreshToken(object.getString("refresh_token"))                    .scope(object.getString("scope"))                    .openId(object.getString("open_id"))                    .build())                .build();    }    @Override    public String authorize(String state) {        return UrlBuilder.fromBaseUrl(source.authorize())                .queryParam("app_key", config.getClientId())                .queryParam("response_type", "code")                .queryParam("redirect_uri", config.getRedirectUri())                .queryParam("scope", this.getScopes(" ", true,                        AuthScopeUtils.getDefaultScopes(AuthJdScope.values())))                .queryParam("state", getRealState(state))                .build();    }    @Override    protected void checkResponse(JSONObject object) {        // 京东        if (object.containsKey("error_response")) {            throw new AuthException(object.getJSONObject("error_response").getString("zh_desc"));        }    }}