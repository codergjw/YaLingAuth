package cn.wen.oauth.request;import cn.wen.oauth.cache.AuthStateCache;import cn.wen.oauth.config.AuthConfig;import cn.wen.oauth.config.AuthDefaultSource;import cn.wen.oauth.entity.AuthCallback;import cn.wen.oauth.entity.AuthResponse;import cn.wen.oauth.entity.AuthToken;import cn.wen.oauth.entity.AuthUser;import cn.wen.oauth.enums.AuthResponseStatus;import cn.wen.oauth.enums.AuthUserGender;import cn.wen.oauth.enums.scope.AuthRenrenScope;import cn.wen.oauth.exception.AuthException;import cn.wen.oauth.utils.AuthScopeUtils;import cn.wen.oauth.utils.HttpUtils;import cn.wen.oauth.utils.UrlBuilder;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.xkcoding.http.util.UrlUtil;import java.util.Objects;/** * @ClassName: AuthRenrenRequest * @Author: 小飞 * @Date: 2023/5/13 14:33 * @Description: 人人登录授权请求处理类 */public class AuthRenrenRequest extends AuthDefaultRequest {    public AuthRenrenRequest(AuthConfig config) {        super(config, AuthDefaultSource.RENREN);    }    public AuthRenrenRequest(AuthConfig config, AuthStateCache authStateCache) {        super(config, AuthDefaultSource.RENREN, authStateCache);    }    @Override    protected AuthToken getAccessToken(AuthCallback authCallback) {        return this.getToken(accessTokenUrl(authCallback.getCode()));    }    /**     * 通过token获取用户信息     *     * @param authToken token信息     * @return     */    @Override    protected AuthUser getUserInfo(AuthToken authToken) {        String response = doGetUserInfo(authToken);        JSONObject userObj = JSONObject.parseObject(response).getJSONObject("response");        return AuthUser.builder()                .rawUserInfo(userObj)                .uuid(userObj.getString("id"))                .avatar(getAvatarUrl(userObj))                .nickname(userObj.getString("name"))                .company(getCompany(userObj))                .gender(getGender(userObj))                .token(authToken)                .source(source.toString())                .build();    }    @Override    public AuthResponse refresh(AuthToken authToken) {        return AuthResponse.builder()                .code(AuthResponseStatus.SUCCESS.getCode())                .data(getToken(this.refreshTokenUrl(authToken.getRefreshToken())))                .build();    }    private AuthToken getToken(String url) {        String response = new HttpUtils(config.getHttpConfig()).post(url).getBody();        JSONObject jsonObject = JSONObject.parseObject(response);        if (jsonObject.containsKey("error")) {            throw new AuthException("Failed to get token from Renren: " + jsonObject);        }        return AuthToken.builder()                .tokenType(jsonObject.getString("token_type"))                .expireIn(jsonObject.getIntValue("expires_in"))                .accessToken(UrlUtil.urlEncode(jsonObject.getString("access_token")))                .refreshToken(UrlUtil.urlEncode(jsonObject.getString("refresh_token")))                .openId(jsonObject.getJSONObject("user").getString("id"))                .build();    }    private String getAvatarUrl(JSONObject userObj) {        JSONArray jsonArray = userObj.getJSONArray("avatar");        if (Objects.isNull(jsonArray) || jsonArray.isEmpty()) {            return null;        }        return jsonArray.getJSONObject(0).getString("url");    }    private AuthUserGender getGender(JSONObject userObj) {        JSONObject basicInformation = userObj.getJSONObject("basicInformation");        if (Objects.isNull(basicInformation)) {            return AuthUserGender.UNKNOWN;        }        return AuthUserGender.getRealGender(basicInformation.getString("sex"));    }    private String getCompany(JSONObject userObj) {        JSONArray jsonArray = userObj.getJSONArray("work");        if (Objects.isNull(jsonArray) || jsonArray.isEmpty()) {            return null;        }        return jsonArray.getJSONObject(0).getString("name");    }    /**     * 返回获取userInfo的url     *     * @param authToken 用户授权后的token     * @return 返回获取userInfo的url     */    @Override    protected String userInfoUrl(AuthToken authToken) {        return UrlBuilder.fromBaseUrl(source.userInfo())                .queryParam("access_token", authToken.getAccessToken())                .queryParam("userId", authToken.getOpenId())                .build();    }    @Override    public String authorize(String state) {        return UrlBuilder.fromBaseUrl(super.authorize(state))                .queryParam("scope", this.getScopes(",", false,                        AuthScopeUtils.getDefaultScopes(AuthRenrenScope.values())))                .build();    }}