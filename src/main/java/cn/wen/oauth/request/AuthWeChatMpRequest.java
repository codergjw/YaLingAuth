package cn.wen.oauth.request;import cn.wen.oauth.cache.AuthStateCache;import cn.wen.oauth.config.AuthConfig;import cn.wen.oauth.config.AuthDefaultSource;import cn.wen.oauth.entity.AuthCallback;import cn.wen.oauth.entity.AuthResponse;import cn.wen.oauth.entity.AuthToken;import cn.wen.oauth.entity.AuthUser;import cn.wen.oauth.enums.AuthResponseStatus;import cn.wen.oauth.enums.AuthUserGender;import cn.wen.oauth.enums.scope.AuthWechatMpScope;import cn.wen.oauth.exception.AuthException;import cn.wen.oauth.utils.AuthScopeUtils;import cn.wen.oauth.utils.GlobalAuthUtils;import cn.wen.oauth.utils.HttpUtils;import cn.wen.oauth.utils.UrlBuilder;import com.alibaba.fastjson.JSONObject;/** * @ClassName: AuthWeChatMpRequest * @Author: 小飞 * @Date: 2023/5/10 11:01 * @Description: 微信公众平台的授权请求处理类 */public class AuthWeChatMpRequest extends AuthDefaultRequest {    public AuthWeChatMpRequest(AuthConfig config) {        super(config, AuthDefaultSource.WECHAT_MP);    }    public AuthWeChatMpRequest(AuthConfig config, AuthStateCache authStateCache) {        super(config, AuthDefaultSource.WECHAT_MP, authStateCache);    }    /**     * 微信的特殊性，此时返回的信息同时包含 openid 和 access_token     *     * @param authCallback 回调返回的参数     * @return 所有信息     */    @Override    protected AuthToken getAccessToken(AuthCallback authCallback) {        return this.getToken(accessTokenUrl(authCallback.getCode()));    }    @Override    protected AuthUser getUserInfo(AuthToken authToken) {        // 获取openId        String openId = authToken.getOpenId();        String response = doGetUserInfo(authToken);        JSONObject object = JSONObject.parseObject(response);        // 校验返回参数        this.checkResponse(object);        // 解析地址        String location = String.format("%s-%s-%s", object.getString("country"), object.getString("province"), object.getString("city"));        // 判断是否存在unionId        if (object.containsKey("unionid")) {            authToken.setUnionId(object.getString("unionid"));        }        return AuthUser.builder()                .rawUserInfo(object)                .username(object.getString("nickname"))                .nickname(object.getString("nickname"))                .avatar(object.getString("headimgurl"))                .location(location)                .uuid(openId)                .gender(AuthUserGender.getWechatRealGender(object.getString("sex")))                .token(authToken)                .source(source.toString())                .build();    }    @Override    public AuthResponse refresh(AuthToken oldToken) {        return AuthResponse.builder()                .code(AuthResponseStatus.SUCCESS.getCode())                .data(this.getToken(refreshTokenUrl(oldToken.getRefreshToken())))                .build();    }    /**     * 获取token，适用于获取access_token和刷新token     *     * @param accessTokenUrl 实际请求token的地址     * @return token对象     */    private AuthToken getToken(String accessTokenUrl) {        String response = new HttpUtils(config.getHttpConfig()).get(accessTokenUrl).getBody();        JSONObject accessTokenObject = JSONObject.parseObject(response);        // 校验返回参数        this.checkResponse(accessTokenObject);        // 生成Token        return AuthToken.builder()                .accessToken(accessTokenObject.getString("access_token"))                .refreshToken(accessTokenObject.getString("refresh_token"))                .expireIn(accessTokenObject.getIntValue("expires_in"))                .openId(accessTokenObject.getString("openid"))                .scope(accessTokenObject.getString("scope"))                .build();    }    /**     * 返回带{@code state}参数的授权url，授权回调时会带上这个{@code state}     *     * @param state state 验证授权流程的参数，可以防止csrf     * @return 返回授权地址     * @since 1.9.3     */    @Override    public String authorize(String state) {        return UrlBuilder.fromBaseUrl(source.authorize())                .queryParam("appid", config.getClientId())                .queryParam("redirect_uri", GlobalAuthUtils.urlEncode(config.getRedirectUri()))                .queryParam("response_type", "code")                .queryParam("scope", this.getScopes(",", false,                        AuthScopeUtils.getDefaultScopes(AuthWechatMpScope.values())))                .queryParam("state", getRealState(state).concat("#wechat_redirect"))                .build();    }    /**     * 返回获取accessToken的url     *     * @param code 授权码     * @return 返回获取accessToken的url     */    @Override    protected String accessTokenUrl(String code) {        return UrlBuilder.fromBaseUrl(source.accessToken())                .queryParam("appid", config.getClientId())                .queryParam("secret", config.getClientSecret())                .queryParam("code", code)                .queryParam("grant_type", "authorization_code")                .build();    }    /**     * 返回获取userInfo的url     *     * @param authToken 用户授权后的token     * @return 返回获取userInfo的url     */    @Override    protected String userInfoUrl(AuthToken authToken) {        return UrlBuilder.fromBaseUrl(source.userInfo())                .queryParam("access_token", authToken.getAccessToken())                .queryParam("openid", authToken.getOpenId())                .queryParam("lang", "zh_CN")                .build();    }    /**     * 返回获取userInfo的url     *     * @param refreshToken getAccessToken方法返回的refreshToken     * @return 返回获取userInfo的url     */    @Override    protected String refreshTokenUrl(String refreshToken) {        return UrlBuilder.fromBaseUrl(source.refresh())                .queryParam("appid", config.getClientId())                .queryParam("grant_type", "refresh_token")                .queryParam("refresh_token", refreshToken)                .build();    }}