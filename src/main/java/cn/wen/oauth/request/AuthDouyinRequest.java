package cn.wen.oauth.request;import cn.wen.oauth.cache.AuthStateCache;import cn.wen.oauth.config.AuthConfig;import cn.wen.oauth.config.AuthDefaultSource;import cn.wen.oauth.entity.AuthCallback;import cn.wen.oauth.entity.AuthResponse;import cn.wen.oauth.entity.AuthToken;import cn.wen.oauth.entity.AuthUser;import cn.wen.oauth.enums.AuthResponseStatus;import cn.wen.oauth.enums.AuthUserGender;import cn.wen.oauth.enums.scope.AuthDouyinScope;import cn.wen.oauth.exception.AuthException;import cn.wen.oauth.utils.AuthScopeUtils;import cn.wen.oauth.utils.HttpUtils;import cn.wen.oauth.utils.UrlBuilder;import com.alibaba.fastjson.JSONObject;/** * @ClassName: AuthDouyinRequest * @Author: 小飞 * @Date: 2023/5/11 15:18 * @Description: 抖音登录授权请求处理类 */public class AuthDouyinRequest extends AuthDefaultRequest {    public AuthDouyinRequest(AuthConfig config) {        super(config, AuthDefaultSource.DOUYIN);    }    public AuthDouyinRequest(AuthConfig config, AuthStateCache authStateCache) {        super(config, AuthDefaultSource.DOUYIN, authStateCache);    }    @Override    protected AuthToken getAccessToken(AuthCallback authCallback) {        return this.getToken(accessTokenUrl(authCallback.getCode()));    }    @Override    protected AuthUser getUserInfo(AuthToken authToken) {        String response = doGetUserInfo(authToken);        JSONObject userInfoObject = JSONObject.parseObject(response);        this.checkResponse(userInfoObject);        JSONObject object = userInfoObject.getJSONObject("data");        return AuthUser.builder()                .rawUserInfo(object)                .uuid(object.getString("union_id"))                .username(object.getString("nickname"))                .nickname(object.getString("nickname"))                .avatar(object.getString("avatar"))                .remark(object.getString("description"))                .gender(AuthUserGender.getRealGender(object.getString("gender")))                .location(String.format("%s %s %s", object.getString("country"), object.getString("province"), object.getString("city")))                .token(authToken)                .source(source.toString())                .build();    }    @Override    public AuthResponse refresh(AuthToken oldToken) {        return AuthResponse.builder()                .code(AuthResponseStatus.SUCCESS.getCode())                .data(getToken(refreshTokenUrl(oldToken.getRefreshToken())))                .build();    }    /**     * 获取token，适用于获取access_token和刷新token     *     * @param accessTokenUrl 实际请求token的地址     * @return token对象     */    private AuthToken getToken(String accessTokenUrl) {        String response = new HttpUtils(config.getHttpConfig()).post(accessTokenUrl).getBody();        JSONObject object = JSONObject.parseObject(response);        this.checkResponse(object);        JSONObject dataObj = object.getJSONObject("data");        return AuthToken.builder()                .accessToken(dataObj.getString("access_token"))                .openId(dataObj.getString("open_id"))                .expireIn(dataObj.getIntValue("expires_in"))                .refreshToken(dataObj.getString("refresh_token"))                .scope(dataObj.getString("scope"))                .build();    }    /**     * 检查响应内容是否正确     *     * @param object 请求响应内容     */    @Override    protected void checkResponse(JSONObject object) {        JSONObject data = object.getJSONObject("data");        if ("error".equals(object.getString("message"))                || data.getIntValue("error_code") != 0) {            throw new AuthException(data.getIntValue("error_code"),                    data.getString("description"));        }    }    /**     * 返回带{@code state}参数的授权url，授权回调时会带上这个{@code state}     *     * @param state state 验证授权流程的参数，可以防止csrf     * @return 返回授权地址     * @since 1.9.3     */    @Override    public String authorize(String state) {        return UrlBuilder.fromBaseUrl(source.authorize())                .queryParam("response_type", "code")                .queryParam("client_key", config.getClientId())                .queryParam("redirect_uri", config.getRedirectUri())                .queryParam("scope", this.getScopes(",", true,                        AuthScopeUtils.getDefaultScopes(AuthDouyinScope.values())))                .queryParam("state", getRealState(state))                .build();    }    /**     * 返回获取accessTokenUrl的URL     *     * @param code 授权码     * @return     */    @Override    protected String accessTokenUrl(String code) {        return UrlBuilder.fromBaseUrl(source.accessToken())                .queryParam("code", code)                .queryParam("client_key", config.getClientId())                .queryParam("client_secret", config.getClientSecret())                .queryParam("grant_type", "authorization_code")                .build();    }    /**     * 返回获取userInfo的url     *     * @param authToken oauth返回的token     * @return 返回获取userInfo的url     */    @Override    protected String userInfoUrl(AuthToken authToken) {        return UrlBuilder.fromBaseUrl(source.userInfo())                .queryParam("access_token", authToken.getAccessToken())                .queryParam("open_id", authToken.getOpenId())                .build();    }    /**     * 获取返回refreshTokenUrl的url     *     * @param refreshToken     * @return     */    @Override    protected String refreshTokenUrl(String refreshToken) {        return UrlBuilder.fromBaseUrl(source.refresh())                .queryParam("client_key", config.getClientId())                .queryParam("refresh_token", refreshToken)                .queryParam("grant_type", "refresh_token")                .build();    }}