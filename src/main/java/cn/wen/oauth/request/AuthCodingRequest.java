package cn.wen.oauth.request;import cn.wen.oauth.cache.AuthStateCache;import cn.wen.oauth.config.AuthConfig;import cn.wen.oauth.config.AuthDefaultSource;import cn.wen.oauth.entity.AuthCallback;import cn.wen.oauth.entity.AuthToken;import cn.wen.oauth.entity.AuthUser;import cn.wen.oauth.enums.AuthUserGender;import cn.wen.oauth.enums.scope.AuthCodingScope;import cn.wen.oauth.exception.AuthException;import cn.wen.oauth.utils.AuthScopeUtils;import cn.wen.oauth.utils.UrlBuilder;import com.alibaba.fastjson.JSONObject;/** * @ClassName: AuthCodingRequest * @Author: 小飞 * @Date: 2023/5/11 14:37 * @Description: 腾讯Coding登录请求处理类 */public class AuthCodingRequest extends AuthDefaultRequest {    public AuthCodingRequest(AuthConfig config) {        super(config, AuthDefaultSource.CODING);    }    public AuthCodingRequest(AuthConfig config, AuthStateCache authStateCache) {        super(config, AuthDefaultSource.CODING, authStateCache);    }    @Override    protected AuthToken getAccessToken(AuthCallback authCallback) {        String response = doGetAuthorizationCode(authCallback.getCode());        JSONObject accessTokenObject = JSONObject.parseObject(response);        this.checkResponse(accessTokenObject);        return AuthToken.builder()                .accessToken(accessTokenObject.getString("access_token"))                .expireIn(accessTokenObject.getIntValue("expires_in"))                .refreshToken(accessTokenObject.getString("refresh_token"))                .build();    }    /**     * 返回用户的基本信息     * @param authToken token信息     * @return     */    @Override    protected AuthUser getUserInfo(AuthToken authToken) {        String response = doGetUserInfo(authToken);        JSONObject object = JSONObject.parseObject(response);        this.checkResponse(object);        object = object.getJSONObject("data");        return AuthUser.builder()                .rawUserInfo(object)                .uuid(object.getString("id"))                .username(object.getString("name"))                .avatar("https://coding.net" + object.getString("avatar"))                .blog("https://coding.net" + object.getString("path"))                .nickname(object.getString("name"))                .company(object.getString("company"))                .location(object.getString("location"))                .gender(AuthUserGender.getRealGender(object.getString("sex")))                .email(object.getString("email"))                .remark(object.getString("slogan"))                .token(authToken)                .source(source.toString())                .build();    }    @Override    protected void checkResponse(JSONObject object) {        // coding        if (object.getIntValue("code") != 0) {            throw new AuthException(object.getString("msg"));        }    }    /**     * 返回带{@code state}参数的授权url，授权回调时会带上这个{@code state}     *     * @param state state 验证授权流程的参数，可以防止csrf     * @return 返回授权地址     */    @Override    public String authorize(String state) {        return UrlBuilder.fromBaseUrl(String.format(source.authorize(), config.getDomainPrefix()))                .queryParam("response_type", "code")                .queryParam("client_id", config.getClientId())                .queryParam("redirect_uri", config.getRedirectUri())                .queryParam("scope", this.getScopes(" ", true,                        AuthScopeUtils.getDefaultScopes(AuthCodingScope.values())))                .queryParam("state", getRealState(state))                .build();    }    /**     * 返回获取accessToken的url     * @param code 授权码     * @return     */    @Override    protected String accessTokenUrl(String code) {        return UrlBuilder.fromBaseUrl(String.format(source.accessToken(), config.getDomainPrefix()))                .queryParam("code", code)                .queryParam("client_id", config.getClientId())                .queryParam("client_secret", config.getClientSecret())                .queryParam("grant_type", "authorization_code")                .queryParam("redirect_uri", config.getRedirectUri())                .build();    }    /**     * 返回获取userInfo的url     *     * @param authToken token     * @return 返回获取userInfo的url     */    @Override    public String userInfoUrl(AuthToken authToken) {        return UrlBuilder.fromBaseUrl(String.format(source.userInfo(), config.getDomainPrefix()))                .queryParam("access_token", authToken.getAccessToken())                .build();    }}