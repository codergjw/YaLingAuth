package cn.wen.oauth.request;import cn.wen.oauth.cache.AuthStateCache;import cn.wen.oauth.config.AuthConfig;import cn.wen.oauth.config.AuthDefaultSource;import cn.wen.oauth.entity.AuthCallback;import cn.wen.oauth.entity.AuthResponse;import cn.wen.oauth.entity.AuthToken;import cn.wen.oauth.entity.AuthUser;import cn.wen.oauth.enums.AuthResponseStatus;import cn.wen.oauth.enums.AuthUserGender;import cn.wen.oauth.exception.AuthException;import cn.wen.oauth.utils.GlobalAuthUtils;import cn.wen.oauth.utils.HttpUtils;import cn.wen.oauth.utils.StringUtils;import cn.wen.oauth.utils.UrlBuilder;import com.alibaba.fastjson.JSONObject;import java.util.Map;/** * @ClassName: AuthQqRequest * @Author: 小飞 * @Date: 2023/5/9 21:14 * @Description: QQ 登录授权处理类 */public class AuthQqRequest extends AuthDefaultRequest{    public AuthQqRequest(AuthConfig config) {        super(config, AuthDefaultSource.QQ);    }    public AuthQqRequest(AuthConfig config, AuthStateCache authStateCache) {        super(config, AuthDefaultSource.QQ, authStateCache);    }    @Override    protected AuthToken getAccessToken(AuthCallback authCallback) {        String response = doGetAuthorizationCode(authCallback.getCode());        return getAuthToken(response);    }    @Override    public AuthResponse refresh(AuthToken authToken) {        String response = new HttpUtils(config.getHttpConfig()).get(refreshTokenUrl(authToken.getRefreshToken())).getBody();        return AuthResponse.builder().code(AuthResponseStatus.SUCCESS.getCode()).data(getAuthToken(response)).build();    }    @Override    protected AuthUser getUserInfo(AuthToken authToken) {        // 解析openId        String openId = this.getOpenId(authToken);        String response = doGetUserInfo(authToken);        JSONObject object = JSONObject.parseObject(response);        if (object.getIntValue("ret") != 0) {            throw new AuthException(object.getString("msg"));        }        // 头像        String avatar = object.getString("figureurl_qq_2");        if (StringUtils.isEmpty(avatar)) {            avatar = object.getString("figureurl_qq_1");        }        String location = String.format("%s-%s", object.getString("province"), object.getString("city"));        return AuthUser.builder()                .rawUserInfo(object)                .username(object.getString("nickname"))                .nickname(object.getString("nickname"))                .avatar(avatar)                .location(location)                .uuid(openId)                .gender(AuthUserGender.getRealGender(object.getString("gender")))                .token(authToken)                .source(source.toString())                .build();    }    /**     * 获取QQ用户的OpenId，支持自定义是否启用查询unionid的功能，如果启用查询unionid的功能，     * 那就需要开发者先通过邮件申请unionid功能，参考链接 {@see http://wiki.connect.qq.com/unionid%E4%BB%8B%E7%BB%8D}     *     * @param authToken 通过{@link AuthQqRequest#getAccessToken(AuthCallback)}获取到的{@code authToken}     * @return openId     */    private String getOpenId(AuthToken authToken) {        String response = new HttpUtils(config.getHttpConfig()).                get(UrlBuilder.fromBaseUrl("https://graph.qq.com/oauth2.0/me")                .queryParam("access_token", authToken.getAccessToken())                .queryParam("unionid", config.isUnionId() ? 1 : 0)                .build()).getBody();        String removePrefix = response.replace("callback(", "");        String removeSuffix = removePrefix.replace(");", "");        String openId = removeSuffix.trim();        JSONObject object = JSONObject.parseObject(openId);        // 父类校验        checkResponse(object);        authToken.setOpenId(object.getString("openid"));        if (object.containsKey("unionid")) {            authToken.setUnionId(object.getString("unionid"));        }        return StringUtils.isEmpty(authToken.getUnionId()) ? authToken.getOpenId() : authToken.getUnionId();    }    /**     * 解析AuthToken     * @param response     * @return     */    private AuthToken getAuthToken(String response) {        Map<String, String> accessTokenObject = GlobalAuthUtils.parseStringToMap(response);        // 如果不存在access_token 说明授权失败        if (!accessTokenObject.containsKey("access_token") || accessTokenObject.containsKey("code")) {            throw new AuthException(accessTokenObject.get("msg"));        }        return AuthToken.builder()                .accessToken(accessTokenObject.get("access_token"))                .expireIn(Integer.parseInt(accessTokenObject.getOrDefault("expires_in", "0")))                .refreshToken(accessTokenObject.get("refresh_token"))                .build();    }}