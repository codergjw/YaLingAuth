package cn.wen.oauth.request;import cn.wen.oauth.cache.AuthStateCache;import cn.wen.oauth.config.AuthConfig;import cn.wen.oauth.config.AuthDefaultSource;import cn.wen.oauth.entity.AuthCallback;import cn.wen.oauth.entity.AuthResponse;import cn.wen.oauth.entity.AuthToken;import cn.wen.oauth.entity.AuthUser;import cn.wen.oauth.enums.AuthResponseStatus;import cn.wen.oauth.enums.AuthUserGender;import cn.wen.oauth.enums.scope.AuthHuaweiScope;import cn.wen.oauth.exception.AuthException;import cn.wen.oauth.utils.AuthScopeUtils;import cn.wen.oauth.utils.HttpUtils;import cn.wen.oauth.utils.UrlBuilder;import com.alibaba.fastjson.JSONObject;import java.util.HashMap;import java.util.Map;/** * @ClassName: AuthHuaweiRequest * @Author: 小飞 * @Date: 2023/5/13 13:28 * @Description: 华为授权登录请求处理类 */public class AuthHuaweiRequest extends AuthDefaultRequest {    public AuthHuaweiRequest(AuthConfig config) {        super(config, AuthDefaultSource.HUAWEI);    }    public AuthHuaweiRequest(AuthConfig config, AuthStateCache authStateCache) {        super(config, AuthDefaultSource.HUAWEI, authStateCache);    }    /**     * 获取accessToken     * @param authCallback 授权成功后的回调参数     * @return     */    @Override    protected AuthToken getAccessToken(AuthCallback authCallback) {        Map<String, String> params = new HashMap<>(8);        params.put("grant_type", "authorization_code");        params.put("code", authCallback.getAuthorization_code());        params.put("client_id", config.getClientId());        params.put("client_secret", config.getClientSecret());        params.put("redirect_uri", config.getRedirectUri());        String response = new HttpUtils(config.getHttpConfig()).post(source.accessToken(), params,                false).getBody();        return getAuthToken(response);    }    private AuthToken getAuthToken(String response) {        JSONObject object = JSONObject.parseObject(response);        // 校验响应数据        this.checkResponse(object);        return AuthToken.builder()                .accessToken(object.getString("access_token"))                .expireIn(object.getIntValue("expires_in"))                .refreshToken(object.getString("refresh_token"))                .build();    }    /**     * 通过Token获取用户信息     *     * @param authToken token信息     * @return     */    @Override    protected AuthUser getUserInfo(AuthToken authToken) {        Map<String, String> params = new HashMap<>(7);        params.put("nsp_ts", System.currentTimeMillis() + "");        params.put("access_token", authToken.getAccessToken());        params.put("nsp_fmt", "JS");        params.put("nsp_svc", "OpenUP.User.getInfo");        String response = new HttpUtils(config.getHttpConfig()).post(source.userInfo(), params, false).getBody();        JSONObject object = JSONObject.parseObject(response);        // 校验参数        this.checkResponse(object);        AuthUserGender gender = getRealGender(object);        return AuthUser.builder()                .rawUserInfo(object)                .uuid(object.getString("userID"))                .username(object.getString("userName"))                .nickname(object.getString("userName"))                .gender(gender)                .avatar(object.getString("headPictureURL"))                .token(authToken)                .source(source.toString())                .build();    }    /**     * 刷新access token （续期）     *     * @param authToken 登录成功后返回的Token信息     * @return AuthResponse     */    @Override    public AuthResponse refresh(AuthToken authToken) {        Map<String, String> params = new HashMap<>(7);        params.put("client_id", config.getClientId());        params.put("client_secret", config.getClientSecret());        params.put("refresh_token", authToken.getRefreshToken());        params.put("grant_type", "refresh_token");        String response = new HttpUtils(config.getHttpConfig()).post(source.refresh(), params, false).getBody();        return AuthResponse.builder().code(AuthResponseStatus.SUCCESS.getCode()).data(getAuthToken(response)).build();    }    /**     * 返回带{@code state}参数的授权url，授权回调时会带上这个{@code state}     *     * @param state state 验证授权流程的参数，可以防止csrf     * @return 返回授权地址     * @since 1.9.3     */    @Override    public String authorize(String state) {        return UrlBuilder.fromBaseUrl(super.authorize(state))                .queryParam("access_type", "offline")                .queryParam("scope", this.getScopes(" ", true,                        AuthScopeUtils.getDefaultScopes(AuthHuaweiScope.values())))                .build();    }    /**     * 获取用户的实际性别。华为系统中，用户的性别：1表示女，0表示男     *     * @param object obj     * @return AuthUserGender     */    private AuthUserGender getRealGender(JSONObject object) {        int genderCodeInt = object.getIntValue("gender");        String genderCode = genderCodeInt == 1 ? "0" : (genderCodeInt == 0) ? "1" : genderCodeInt + "";        return AuthUserGender.getRealGender(genderCode);    }    @Override    protected void checkResponse(JSONObject object) {        if (object.containsKey("NSP_STATUS")) {            throw new AuthException(object.getString("error"));        }        if (object.containsKey("error")) {            throw new AuthException(object.getString("sub_error") + ":" + object.getString("error_description"));        }    }}