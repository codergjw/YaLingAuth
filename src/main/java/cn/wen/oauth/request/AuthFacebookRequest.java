package cn.wen.oauth.request;import cn.wen.oauth.cache.AuthStateCache;import cn.wen.oauth.config.AuthConfig;import cn.wen.oauth.config.AuthDefaultSource;import cn.wen.oauth.entity.AuthCallback;import cn.wen.oauth.entity.AuthToken;import cn.wen.oauth.entity.AuthUser;import cn.wen.oauth.enums.AuthUserGender;import cn.wen.oauth.enums.scope.AuthFacebookScope;import cn.wen.oauth.exception.AuthException;import cn.wen.oauth.utils.AuthScopeUtils;import cn.wen.oauth.utils.UrlBuilder;import com.alibaba.fastjson.JSONObject;/** * @ClassName: AuthFacebookRequest * @Author: 小飞 * @Date: 2023/5/13 15:10 * @Description: Facebook 登录授权请求处理类 */public class AuthFacebookRequest extends AuthDefaultRequest {    public AuthFacebookRequest(AuthConfig config) {        super(config, AuthDefaultSource.FACEBOOK);    }    public AuthFacebookRequest(AuthConfig config, AuthStateCache authStateCache) {        super(config, AuthDefaultSource.FACEBOOK, authStateCache);    }    @Override    protected AuthToken getAccessToken(AuthCallback authCallback) {        String response = doPostAuthorizationCode(authCallback.getCode());        JSONObject accessTokenObject = JSONObject.parseObject(response);        this.checkResponse(accessTokenObject);        return AuthToken.builder()                .accessToken(accessTokenObject.getString("access_token"))                .expireIn(accessTokenObject.getIntValue("expires_in"))                .tokenType(accessTokenObject.getString("token_type"))                .build();    }    @Override    protected AuthUser getUserInfo(AuthToken authToken) {        String userInfo = doGetUserInfo(authToken);        JSONObject object = JSONObject.parseObject(userInfo);        this.checkResponse(object);        return AuthUser.builder()                .rawUserInfo(object)                .uuid(object.getString("id"))                .username(object.getString("name"))                .nickname(object.getString("name"))                .blog(object.getString("link"))                .avatar(getUserPicture(object))                .location(object.getString("locale"))                .email(object.getString("email"))                .gender(AuthUserGender.getRealGender(object.getString("gender")))                .token(authToken)                .source(source.toString())                .build();    }    private String getUserPicture(JSONObject object) {        String picture = null;        if (object.containsKey("picture")) {            JSONObject pictureObj = object.getJSONObject("picture");            pictureObj = pictureObj.getJSONObject("data");            if (null != pictureObj) {                picture = pictureObj.getString("url");            }        }        return picture;    }    /**     * 返回获取userInfo的url     *     * @param authToken 用户token     * @return 返回获取userInfo的url     */    @Override    protected String userInfoUrl(AuthToken authToken) {        return UrlBuilder.fromBaseUrl(source.userInfo())                .queryParam("access_token", authToken.getAccessToken())                .queryParam("fields", "id,name,birthday,gender,hometown,email,devices,picture.width(400),link")                .build();    }    /**     * 校验response返回值     * @param object     */    @Override    protected void checkResponse(JSONObject object) {        if (object.containsKey("error")) {            throw new AuthException(object.getJSONObject("error").getString("message"));        }    }    /**     * 返回带{@code state}参数的授权url，授权回调时会带上这个{@code state}     *     * @param state state 验证授权流程的参数，可以防止csrf     * @return 返回授权地址     */    @Override    public String authorize(String state) {        return UrlBuilder.fromBaseUrl(super.authorize(state))                .queryParam("scope", this.getScopes(",", false, AuthScopeUtils.getDefaultScopes(AuthFacebookScope.values())))                .build();    }}