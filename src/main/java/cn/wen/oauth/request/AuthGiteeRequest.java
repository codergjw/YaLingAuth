package cn.wen.oauth.request;import cn.wen.oauth.cache.AuthStateCache;import cn.wen.oauth.config.AuthConfig;import cn.wen.oauth.config.AuthDefaultSource;import cn.wen.oauth.entity.AuthCallback;import cn.wen.oauth.entity.AuthToken;import cn.wen.oauth.entity.AuthUser;import cn.wen.oauth.enums.AuthUserGender;import cn.wen.oauth.enums.scope.AuthGiteeScope;import cn.wen.oauth.exception.AuthException;import cn.wen.oauth.utils.AuthScopeUtils;import cn.wen.oauth.utils.UrlBuilder;import com.alibaba.fastjson.JSONObject;/** * @ClassName: AuthGiteeRequest * @Author: 小飞 * @Date: 2023/5/9 21:46 * @Description: gitee 登录请求处理 */public class AuthGiteeRequest extends AuthDefaultRequest {    public AuthGiteeRequest(AuthConfig config) {        super(config, AuthDefaultSource.GITEE);    }    public AuthGiteeRequest(AuthConfig config, AuthStateCache authStateCache) {        super(config, AuthDefaultSource.GITEE, authStateCache);    }    @Override    protected AuthToken getAccessToken(AuthCallback authCallback) {        String response = doPostAuthorizationCode(authCallback.getCode());        // 解析返回的Token参数        JSONObject accessTokenObject = JSONObject.parseObject(response);        // 校验返回的参数是否为空或者无效        this.checkResponse(accessTokenObject);        // 生成AuthToken 返回用户        return AuthToken.builder()                .accessToken(accessTokenObject.getString("access_token"))                .refreshToken(accessTokenObject.getString("refresh_token"))                .scope(accessTokenObject.getString("scope"))                .tokenType(accessTokenObject.getString("token_type"))                .expireIn(accessTokenObject.getIntValue("expires_in"))                .build();    }    /**     * 通过AuthToken获取用户的基本信息     *     * @param authToken token信息     * @return     */    @Override    protected AuthUser getUserInfo(AuthToken authToken) {        // 通过父类的统一发送请求获取用户信息        String userInfo = doGetUserInfo(authToken);        // 解析获取的JSON数据        JSONObject object = JSONObject.parseObject(userInfo);        // 校验返回数据        this.checkResponse(object);        return AuthUser.builder()                // 原始数据                .rawUserInfo(object)                .uuid(object.getString("id"))                .username(object.getString("login"))                .avatar(object.getString("avatar_url"))                .blog(object.getString("blog"))                .nickname(object.getString("name"))                .company(object.getString("company"))                .location(object.getString("address"))                .email(object.getString("email"))                .remark(object.getString("bio"))                .gender(AuthUserGender.UNKNOWN)                .token(authToken)                .source(source.toString())                .build();    }    /**     * 返回带{@code state}参数的授权url，授权回调时会带上这个{@code state}     *     * @param state state 验证授权流程的参数，可以防止csrf     * @return 返回授权地址     */    @Override    public String authorize(String state) {        return UrlBuilder.fromBaseUrl(super.authorize(state))                .queryParam("scope", this.getScopes(" ", true, AuthScopeUtils.getDefaultScopes(AuthGiteeScope.values())))                .build();    }}