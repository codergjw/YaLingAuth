package cn.wen.oauth.enums.scope;import cn.wen.oauth.cache.AuthStateCache;import cn.wen.oauth.config.AuthConfig;import cn.wen.oauth.config.AuthDefaultSource;import cn.wen.oauth.config.AuthSource;import cn.wen.oauth.entity.AuthCallback;import cn.wen.oauth.entity.AuthResponse;import cn.wen.oauth.entity.AuthToken;import cn.wen.oauth.entity.AuthUser;import cn.wen.oauth.enums.AuthResponseStatus;import cn.wen.oauth.enums.AuthUserGender;import cn.wen.oauth.exception.AuthException;import cn.wen.oauth.request.AuthDefaultRequest;import cn.wen.oauth.utils.GlobalAuthUtils;import cn.wen.oauth.utils.HttpUtils;import cn.wen.oauth.utils.StringUtils;import cn.wen.oauth.utils.UrlBuilder;import com.alibaba.fastjson.JSONObject;/** * @ClassName: AuthTaobaoRequest * @Author: 小飞 * @Date: 2023/5/10 20:56 * @Description: 淘宝的登录请求处理类 */public class AuthTaobaoRequest extends AuthDefaultRequest {    public AuthTaobaoRequest(AuthConfig config, AuthSource source) {        super(config, AuthDefaultSource.TAOBAO);    }    public AuthTaobaoRequest(AuthConfig config, AuthSource source, AuthStateCache authStateCache) {        super(config, AuthDefaultSource.TAOBAO, authStateCache);    }    @Override    protected AuthToken getAccessToken(AuthCallback authCallback) {        return AuthToken.builder().accessCode(authCallback.getCode()).build();    }    @Override    protected AuthUser getUserInfo(AuthToken authToken) {        String response = doPostAuthorizationCode(authToken.getAccessCode());        JSONObject accessTokenObject = JSONObject.parseObject(response);        if (accessTokenObject.containsKey("error")) {            throw new AuthException(accessTokenObject.getString("error_description"));        }        // 将TokenObject封装成AuthToken        authToken = this.getAuthToken(accessTokenObject);        // 解析别称        String nick = GlobalAuthUtils.urlDecode(accessTokenObject.getString("taobao_user_nick"));        return AuthUser.builder()                .rawUserInfo(accessTokenObject)                .uuid(StringUtils.isEmpty(authToken.getUid()) ? authToken.getOpenId() : authToken.getUid())                .username(nick)                .nickname(nick)                .gender(AuthUserGender.UNKNOWN)                .token(authToken)                .source(source.toString())                .build();    }    private AuthToken getAuthToken(JSONObject object) {        this.checkResponse(object);        // 返回builder的数据        return AuthToken.builder()                .accessToken(object.getString("access_token"))                .expireIn(object.getIntValue("expires_in"))                .tokenType(object.getString("token_type"))                .idToken(object.getString("id_token"))                .refreshToken(object.getString("refresh_token"))                .uid(object.getString("taobao_user_id"))                .openId(object.getString("taobao_open_uid"))                .build();    }    /**     * 刷新AuthToken     * @param oldToken     * @return     */    @Override    public AuthResponse refresh(AuthToken oldToken) {        String tokenUrl = refreshTokenUrl(oldToken.getRefreshToken());        String response = new HttpUtils(config.getHttpConfig()).post(tokenUrl).getBody();        JSONObject accessTokenObject = JSONObject.parseObject(response);        return AuthResponse.builder()                .code(AuthResponseStatus.SUCCESS.getCode())                .data(this.getAuthToken(accessTokenObject))                .build();    }    /**     * 返回带{@code state}参数的授权url，授权回调时会带上这个{@code state}     *     * @param state state 验证授权流程的参数，可以防止csrf     * @return     */    @Override    public String authorize(String state) {        return UrlBuilder.fromBaseUrl(source.authorize())                .queryParam("response_type", "code")                .queryParam("client_id", config.getClientId())                .queryParam("redirect_uri", config.getRedirectUri())                .queryParam("view", "web")                .queryParam("state", getRealState(state))                .build();    }}