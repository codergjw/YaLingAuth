package io.github.codergjw;import io.github.codergjw.config.AuthConfig;import io.github.codergjw.request.AuthBaiduRequest;import io.github.codergjw.request.AuthGiteeRequest;import io.github.codergjw.request.AuthQqRequest;import io.github.codergjw.request.AuthRequest;import io.github.codergjw.utils.AuthStateUtils;import org.junit.Assert;import org.junit.Test;/** * @ClassName: AuthRequestBuilderTest * @Author: 小飞 * @Date: 2023/5/9 22:04 * @Description: 权限请求测试类 */public class AuthRequestBuilderTest {    private final static String GITEE_CLIENT_ID = "9cdc715c5ac275244b3246ba1fb5cd7bccb7fb677a2cd0b94ce5520b50cd1198";    private final static String GITEE_CLIENT_SECRET = "63bde2127cba818e2f54cea984a368caaef9522ca48c604e8ad6dec74ce174c8";    @Test    public void giteeTest() {        AuthRequest authRequest = AuthRequestBuilder.builder()                .source("gitee")                .authConfig(source -> {                    // 通过 source 动态获取 AuthConfig                    // 此处可以灵活的从 sql 中取配置也可以从配置文件中取配置                    return AuthConfig.builder()                            .clientId(GITEE_CLIENT_ID)                            .clientSecret(GITEE_CLIENT_SECRET)                            .redirectUri("http://www.yaling654.top/")                            .build();                }).build();        // 断言判断是否为AuthGiteeRequest        Assert.assertTrue(authRequest instanceof AuthGiteeRequest);        System.out.println(authRequest.authorize(AuthStateUtils.createState()));    }    @Test    public void baiduTest() {        AuthRequest authRequest = AuthRequestBuilder.builder()                .source("BAIDU")                .authConfig(source -> {                    // 通过 source 动态获取 AuthConfig                    // 此处可以灵活的从 sql 中取配置也可以从配置文件中取配置                    return AuthConfig.builder()                            .clientId("GVvSd78hDIKuqHvkf058heKcbxnLmeAg")                            .clientSecret("DIeNgrudi17pALzqhUBR4OIjsrPPtC1d")                            .redirectUri("http://www.yaling654.top/")                            .build();                }).build();        // 断言判断是否为AuthGiteeRequest        Assert.assertTrue(authRequest instanceof AuthBaiduRequest);        System.out.println(authRequest.authorize(AuthStateUtils.createState()));    }    @Test    public void qqTest() {        AuthRequest authRequest = AuthRequestBuilder.builder()                .source("QQ")                .authConfig(source -> {                    // 通过 source 动态获取 AuthConfig                    // 此处可以灵活的从 sql 中取配置也可以从配置文件中取配置                    return AuthConfig.builder()                            .clientId(GITEE_CLIENT_ID)                            .clientSecret(GITEE_CLIENT_SECRET)                            .redirectUri("http://www.yaling654.top/")                            .build();                }).build();        // 断言判断是否为AuthGiteeRequest        Assert.assertTrue(authRequest instanceof AuthQqRequest);        System.out.println(authRequest.authorize(AuthStateUtils.createState()));    }}